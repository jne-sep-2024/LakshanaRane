{"ast":null,"code":"var _jsxFileName = \"/home/ttpl-lnve15-0118/Desktop/Trainings/Modules/LakshanaRane/Module_2/20_authentication/frontend/src/pages/Authentication.js\";\nimport AuthForm from \"../components/AuthForm\";\nimport { json, redirect } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthenticationPage() {\n  return /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 10\n  }, this);\n}\n_c = AuthenticationPage;\nexport default AuthenticationPage;\nexport async function action({\n  request\n}) {\n  const searchParams = new URL(request.url).searchParams();\n  const mode = searchParams.get(\"mode\") || \"login\";\n\n  // to handle the mode error\n  if (mode !== \"login\" && mode !== \"signup\") {\n    throw json({\n      message: \"Unsuported mode.\"\n    }, {\n      status: 422\n    });\n  }\n  //data object that is returned by formData()\n  const data = await request.formData();\n  const authData = {\n    email: data.get(\"email\"),\n    password: data.get(\"password\")\n  };\n\n  // /sending a request to my backend-> do this with the fetch func^\n\n  const response = await fetch('http://localhost:8080/' + mode, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(authData) //to convert data into json format\n  });\n\n  //is we try to login by invalid credentials\n  if (response.status === 422 || response.status === 401) {\n    const responseData = await response.json();\n    console.log(responseData);\n    return response;\n  }\n  if (!response.ok) {\n    throw json({\n      mesage: 'could not authenticate user'\n    }, {\n      status: 500\n    });\n  }\n\n  //soon: manage the token-> which we will get back from backend\n\n  //redirect user to login page\n  return redirect('/');\n}\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["AuthForm","json","redirect","jsxDEV","_jsxDEV","AuthenticationPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","searchParams","URL","url","mode","get","message","status","data","formData","authData","email","password","response","fetch","method","headers","body","JSON","stringify","responseData","console","log","ok","mesage","$RefreshReg$"],"sources":["/home/ttpl-lnve15-0118/Desktop/Trainings/Modules/LakshanaRane/Module_2/20_authentication/frontend/src/pages/Authentication.js"],"sourcesContent":["import AuthForm from \"../components/AuthForm\";\nimport { json, redirect } from \"react-router-dom\";\nfunction AuthenticationPage() {\n  return <AuthForm />;\n}\n\nexport default AuthenticationPage;\n\nexport async function action({ request }) {\n  const searchParams = new URL(request.url).searchParams();\n  const mode = searchParams.get(\"mode\") || \"login\";\n\n  // to handle the mode error\n  if (mode !== \"login\" && mode !== \"signup\") {\n    throw json({ message: \"Unsuported mode.\" }, { status: 422 });\n  }\n  //data object that is returned by formData()\n  const data = await request.formData();\n  const authData = {\n    email: data.get(\"email\"),\n    password: data.get(\"password\"),\n  };\n\n  // /sending a request to my backend-> do this with the fetch func^\n\n  const response = await fetch('http://localhost:8080/' + mode, {\n    method: \"POST\",\n    headers:{\n      'Content-Type':'application/json',\n    },\n    body: JSON.stringify(authData)      //to convert data into json format\n  });\n\n  //is we try to login by invalid credentials\n  if(response.status===422 || response.status===401){\n    const responseData=await response.json();\n    console.log(responseData);\n    return response;\n  }\n  \n  if(!response.ok){\n    throw json({mesage:'could not authenticate user'},{status:500});\n    \n  }\n    \n    //soon: manage the token-> which we will get back from backend\n    \n    //redirect user to login page\n    return redirect('/');\n\n}\n"],"mappings":";AAAA,OAAOA,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAClD,SAASC,kBAAkBA,CAAA,EAAG;EAC5B,oBAAOD,OAAA,CAACJ,QAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrB;AAACC,EAAA,GAFQL,kBAAkB;AAI3B,eAAeA,kBAAkB;AAEjC,OAAO,eAAeM,MAAMA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EACxC,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAC,CAACF,YAAY,CAAC,CAAC;EACxD,MAAMG,IAAI,GAAGH,YAAY,CAACI,GAAG,CAAC,MAAM,CAAC,IAAI,OAAO;;EAEhD;EACA,IAAID,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,QAAQ,EAAE;IACzC,MAAMf,IAAI,CAAC;MAAEiB,OAAO,EAAE;IAAmB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EAC9D;EACA;EACA,MAAMC,IAAI,GAAG,MAAMR,OAAO,CAACS,QAAQ,CAAC,CAAC;EACrC,MAAMC,QAAQ,GAAG;IACfC,KAAK,EAAEH,IAAI,CAACH,GAAG,CAAC,OAAO,CAAC;IACxBO,QAAQ,EAAEJ,IAAI,CAACH,GAAG,CAAC,UAAU;EAC/B,CAAC;;EAED;;EAEA,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,GAAGV,IAAI,EAAE;IAC5DW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAC;MACN,cAAc,EAAC;IACjB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ,CAAC,CAAM;EACtC,CAAC,CAAC;;EAEF;EACA,IAAGG,QAAQ,CAACN,MAAM,KAAG,GAAG,IAAIM,QAAQ,CAACN,MAAM,KAAG,GAAG,EAAC;IAChD,MAAMa,YAAY,GAAC,MAAMP,QAAQ,CAACxB,IAAI,CAAC,CAAC;IACxCgC,OAAO,CAACC,GAAG,CAACF,YAAY,CAAC;IACzB,OAAOP,QAAQ;EACjB;EAEA,IAAG,CAACA,QAAQ,CAACU,EAAE,EAAC;IACd,MAAMlC,IAAI,CAAC;MAACmC,MAAM,EAAC;IAA6B,CAAC,EAAC;MAACjB,MAAM,EAAC;IAAG,CAAC,CAAC;EAEjE;;EAEE;;EAEA;EACA,OAAOjB,QAAQ,CAAC,GAAG,CAAC;AAExB;AAAC,IAAAQ,EAAA;AAAA2B,YAAA,CAAA3B,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}